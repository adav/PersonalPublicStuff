package Model;

/**
 * User: adav
 */

import Model.RecommendationModel.CustomTypes.LongLat;
import Model.RecommendationModel.CustomTypes.POJOs.User.WithinSiteUser;
import Model.RecommendationModel.CustomTypes.POJOs.User.WithinSiteUserLocation;
import Model.RecommendationModel.Models.RecommendationModel;
import Model.RecommendationModel.Models.RecommendationModelInterface;
import com.mongodb.*;

import javax.servlet.ServletOutputStream;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;

public class Util {

    public static DB getDB(){
        try{
            //Mongo mongo = new Mongo("dbteach2.cs.bham.ac.uk");
            MongoClient mongoClient = new MongoClient("dbteach2.cs.bham.ac.uk");                        //dbteach2.cs.bham.ac.uk
            DB db = mongoClient.getDB("axd967");
            boolean auth = db.authenticate("axd967", "mymriEdUd".toCharArray());
            return db;
        } catch (UnknownHostException ex){
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static WithinSiteUser getUserByEmail(String userEmail){
        DB db = Model.Util.getDB();

        try {
            db.requestStart();
            db.requestEnsureConnection();

            DBCollection userColl = db.getCollection("withinsite.users");

            DBCursor dbCursor = userColl.find(new BasicDBObject("email", userEmail));
            try {

                if (dbCursor.count() == 1 & dbCursor.hasNext()) {
                    return (WithinSiteUser) dbCursor.next();
                }
            } finally {
                dbCursor.close();
            }


        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.requestDone();
        }

        return null;
    }
}
