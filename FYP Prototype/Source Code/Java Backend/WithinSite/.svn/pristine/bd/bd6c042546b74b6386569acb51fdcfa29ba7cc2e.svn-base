package Model.RecommendationModel.Models.BasicModel;

import Model.API.ASyncResponses.PushNotifications.PushNotificationManager;
import Model.RecommendationModel.CustomTypes.LongLat;
import Model.RecommendationModel.CustomTypes.POJOs.Results.WithinSitePlace;
import Model.RecommendationModel.CustomTypes.POJOs.Results.WithinSiteServiceModuleResult;
import Model.RecommendationModel.CustomTypes.POJOs.Results.WithinSiteResults;
import Model.RecommendationModel.CustomTypes.POJOs.User.RecommendationPreferences.WithinSiteUserRecPrefsHabits;
import Model.RecommendationModel.CustomTypes.POJOs.User.WithinSiteUser;
import Model.RecommendationModel.Models.RecommendationModelInterface;
import Model.RecommendationModel.ServiceModules.SocialNetworks.FacebookModule;
import Model.RecommendationModel.ServiceModules.SocialNetworks.FoursquareModule;
import Model.Util;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import org.json.JSONArray;

import java.util.Date;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * User: adav
 */
public class BasicModel implements RecommendationModelInterface {

    private ThreadPoolExecutor threadPoolExecutor;

    public BasicModel() {
        threadPoolExecutor = new ThreadPoolExecutor(5, 100, 5000l, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());

    }

    @Override
    public WithinSiteResults generateRecommendedNearbyResults(WithinSiteUser user) {
//        FutureTask<WithinSiteResults> task = new FutureTask<WithinSiteResults>(new FindNearby(user));
//        threadPoolExecutor.execute(task);
//        try {
//            return task.get();
//        } catch (Exception e) {
//            e.printStackTrace();
//            return null;
//        }
        FacebookModule facebookModule = new FacebookModule();
        WithinSiteResults results = new WithinSiteResults();
        results.addResult(facebookModule.getNearestInformedInterestingPlaces(user));
        return results;
    }

    @Override
    public WithinSiteResults generateUninformedNearbyResults(LongLat location) {
//        FutureTask<WithinSiteResults> task = new FutureTask<WithinSiteResults>(new FindNearby(location));
//        threadPoolExecutor.execute(task);
//        try {
//            return task.get();
//        } catch (Exception e) {
//            e.printStackTrace();
//            return null;
//        }
        FoursquareModule foursquareModule = new FoursquareModule();

        WithinSiteResults results = new WithinSiteResults();
        results.addResult(foursquareModule.getNearestUninformedInterestingPlaces(location.getLongitude(), location.getLatitude()));

        return results;
    }

    @Override
    public void determineIfAndSendPushNotificationRecommendation(WithinSiteUser user) {
        //PushNotificationManager.sendRecommendationPushNotification(user);
        FoursquareModule foursquareModule = new FoursquareModule();
        FacebookModule facebookModule = new FacebookModule();
        //WithinSiteResults results = new WithinSiteResults();

        //results.addResult(foursquareModule.getNearestUninformedInterestingPlaces(user.getMostRecentLocation().getLongitude(), user.getMostRecentLocation().getLatitude()));
        //results.addResult(facebookModule.getNearestInformedInterestingPlaces(user));

        WithinSiteServiceModuleResult facebookFriendRecommended = facebookModule.getNearestInformedInterestingPlaces(user);
        try {
            JSONArray fbRecs = (JSONArray) facebookFriendRecommended.get("places");

            PushNotificationManager.sendRecommendationPushNotification(user,(WithinSitePlace) fbRecs.get(0));
        } catch (Exception e) {
            e.printStackTrace();
        }

        //PushNotificationManager.sendSystemPushNotification(user, "Reached determineIfAndSendPushNotificationRecommendation() in Model " + (new Date()).toString());
    }

    @Override
    public void updateUserPreferencesFromPlaceAtCurrentLocation(WithinSiteUser user) {

        FoursquareModule foursquareModule = new FoursquareModule();
        if (foursquareModule.canGetNearestPlaceForLocatingUser()) {
            WithinSitePlace frequentedPlace = foursquareModule.getNearestPlace(user.getMostRecentLocation());

            if (frequentedPlace != null) {

                DB db = Model.Util.getDB();

                try {
                    db.requestStart();
                    db.requestEnsureConnection();

                    Date dateCheckin = new Date();

                    DBCollection userColl = db.getCollection("withinsite.users");

                    BasicDBObject userQuery = new BasicDBObject()
                            .append("email", user.getEmail());

                    BasicDBObject push = new BasicDBObject().append("$push", new BasicDBObject()
                            .append("auto_checkins", new BasicDBObject()
                                    .append("name", frequentedPlace.getPlaceName())
                                    .append("location", frequentedPlace.getPlaceLocation().getDBObjForQuery())
                                    .append("categories", frequentedPlace.getPlaceCategories())
                                    .append("service", "foursquare") //TODO programmatic service in place
                                    .append("service_id", frequentedPlace.getPlaceServiceId())
                            ));
                    //this appends a new location to the array locations (also creates the field should it not exist in the user document)

                    userColl.update(userQuery, push);

                    for (String cat : frequentedPlace.getPlaceCategories()) {

                        String catSantised = Util.sanitiseCategoryForPreferences(cat);

                        BasicDBObject addPref = new BasicDBObject().append("$inc", new BasicDBObject()
                                .append("auto_checkin_prefs." + WithinSiteUserRecPrefsHabits.getTimePeriod(dateCheckin) + "." + catSantised, 1)
                        );

                        userColl.update(userQuery, addPref);

                    }

                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    db.requestDone();
                }
            }
        }
    }


    /* JAVA ORACLE EXAMPLE FOR REFERENCE:
    private ThreadPoolExecutor tpe;


  public SingleThreadAccess() {
    tpe = new ThreadPoolExecutor(1, 1, 50000L, TimeUnit.SECONDS,
        new LinkedBlockingQueue<Runnable>());
  }

  public void invokeLater(Runnable r) {
    tpe.execute(r);
  }

  public void invokeAneWait(Runnable r) throws InterruptedException, ExecutionException {
    FutureTask task = new FutureTask(r, null);
    tpe.execute(task);
    task.get();
  }

  public void shutdown() {
    tpe.shutdown();
  }*/
}
